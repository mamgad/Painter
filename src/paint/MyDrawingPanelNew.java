/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paint;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import static java.lang.System.err;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author hp
 */
public class MyDrawingPanelNew extends javax.swing.JPanel {
    String towrite="";
    int shapeType = -1;
    Color currentColor;
    boolean isFilled;
    private Circle currentSelectedCircle;
    private Rectangle currentSelectedRectangle;
    private Triangle currentSelectedTriangle;
    private Line currentSelectedLine;

    Graphics g;
    ArrayList<Shapes> Shapes = new ArrayList<>();
    Point p1 = new Point(-1, -1);
    Point p2 = new Point(-1, -1);
    Point p3 = new Point(-1, -1);
    Point temp = new Point(-1, 1);

    enum currentMode {

        SELECTING, DRAWING, RESIZNG, EDITING

    };
    currentMode CM;

    public currentMode getCM() {
        return CM;
    }

    public void setCM(currentMode cm) {
        this.CM = cm;
        if (cm == currentMode.DRAWING) {
            for (Shapes Shape : Shapes) {
                Shape.setisSelected(false);
            }
            repaint();
        }
    }

    public void setCurrentshapeField(boolean currentshapeField) {
        this.isFilled = currentshapeField;

    }

//    public void DeleteSelectedShape() {
//        if (currentSelectedCircle != null) {
//            Shapes.remove(currentSelectedCircle);
//        }
//    }
    public ArrayList<Shapes> getTheShapes() {
        return Shapes;
    }

    public int getShapeType() {
        return shapeType;
    }

    public void setShapeType(int shapeType) {
        this.shapeType = shapeType;
    }

    public Color getCurrentColor() {
        return currentColor;
    }

    public void setCurrentColor(Color currentColor) {
        this.currentColor = currentColor;
    }

    public Boolean getIsFilled() {
        return isFilled;
    }

    public void setIsFilled(Boolean isFilled) {
        this.isFilled = isFilled;
    }

//    public void deleteShape(){
//    if(Shapes.)
//    }
    public MyDrawingPanelNew() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
//        if (CM == currentMode.DRAWING) {
//            this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
//            switch (shapeType) {
//                case 0: {
//                    if (p1.getX() == -1) {
//                        p1 = new Point(evt.getX(), evt.getY());
//                        Line line = new Line(p1, p1, currentColor, false);
//                        Shapes.add(line);
//                        repaint();
//                    } else if (p2.getX() == -1) {
//                        p2 = new Point(evt.getX(), evt.getY());
//                        Line line = new Line(p1, p2, currentColor, false);
//                        Shapes.add(line);
//                        repaint();
//                        p1 = new Point(-1, -1);
//                        p2 = new Point(-1, -1);
//                    }
//                    break;
//                }
//                case 1: {
//                    if (p1.getX() == -1) {
//                        p1 = new Point(evt.getX(), evt.getY());
//                    } else if (p2.getX() == -1) {
//                        p2 = new Point(evt.getX(), evt.getY());
//                        int xsq = (int) Math.pow((p1.getX() - p2.getX()), 2);
//                        int ysq = (int) Math.pow((p1.getY() - p2.getY()), 2);
//                        int radius = (int) Math.sqrt(xsq + ysq);
//                        Point pnt = new Point((int) (p1.getX() - radius), (int) (p1.getY() - radius));
//                        Circle circle = new Circle(pnt, radius, currentColor, isFilled);
//                        Shapes.add(circle);
//                        repaint();
//                        p1 = new Point(-1, -1);
//                        p2 = new Point(-1, -1);
//
//                    }
//                    break;
//
//                }
//                case 2: {
//                    if (p1.getX() == -1) {
//                        p1 = new Point(evt.getX(), evt.getY());
//                    } else if (p2.getX() == -1) {
//                        p2 = new Point(evt.getX(), evt.getY());
//                        Rectangle rec = null;
//                        if (p1.getX() < p2.getX()) {
//                            if (p1.getY() < p2.getY()) {
//                                //  rec = new Rectangle(p1 ,(int) Math.abs((p1.getX() - p2.getX())),(int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//                                rec = new Rectangle(p1, Math.abs((int) (p1.getX() - p2.getX())), (int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//                            } else {
//                                double blah = p1.getY() - p2.getY();
//                                Point Fst = new Point((int) (p1.getX()), ((int) p1.getY() - (int) Math.abs(blah)));
//                                rec = new Rectangle(Fst, (int) Math.abs((p1.getX() - p2.getX())), (int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//
//                            }
//
//                        } else {
//                            if (p1.getY() < p2.getY()) {
//                                Point Fst = new Point((int) p2.getX(), (int) p2.getY() - (int) Math.abs((p1.getY()) - (p2.getY())));
//                                rec = new Rectangle(Fst, (int) Math.abs(p1.getX() - p2.getX()), (int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//                            } else {
//                                Point Fst = new Point((int) p2.getX(), (int) p1.getY() - (int) Math.abs((p1.getY()) - (p2.getY())));
//                                rec = new Rectangle(Fst, (int) Math.abs((p1.getX() - p2.getX())), (int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//
//                            }
//                        }
//                        Shapes.add(rec);
//                        repaint();
//                        p1 = new Point(-1, -1);
//                        p2 = new Point(-1, -1);
//
//                    }
//                    break;
//                }
//                case 3: {
//                    if (p1.getX() == -1) {
//                        p1 = new Point(evt.getX(), evt.getY());
//                    } else if (!(p1.getX() == -1) && (p2.getX() == -1)) {
//                        p2 = new Point(evt.getX(), evt.getY());
//                    } else if (!(p1.getX() == -1) && !(p2.getX() == -1) && (p3.getX() == -1)) {
//                        p3 = new Point(evt.getX(), evt.getY());
//                        Triangle t = new Triangle(p1, p2, p3, currentColor, isFilled);
//                        Shapes.add(t);
//                        repaint();
//                        p1 = new Point(-1, -1);
//                        p2 = new Point(-1, -1);
//                        p3 = new Point(-1, -1);
//                    }
//
//                    break;
//                }
//            }
//        } 
        if (CM == currentMode.SELECTING) {
            System.out.println("here");
        }

    }//GEN-LAST:event_formMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (CM == currentMode.DRAWING) {
            if (shapeType == 0) { //line//
                if (p1.getX() != -1) {
                    p2 = new Point(evt.getX(), evt.getY());
                    Line l = (Line) Shapes.get(Shapes.size() - 1);
                    l.setEndPoint(new Point(evt.getX(), evt.getY()));
                    repaint();
                }
            } else if (shapeType == 1) { //circle//

                if (p1.getX() != -1) {
                    p2 = new Point(evt.getX(), evt.getY());
                    Circle c = (Circle) Shapes.get(Shapes.size() - 1);
                    int rad = ((int) p2.getX() - (int) p1.getX()) / 2;
                    c.setRadius(rad);
                    repaint();
                }
            } else if (shapeType == 2) {
                p2 = new Point(evt.getX(), evt.getY());
                Rectangle rec = (Rectangle) Shapes.get(Shapes.size() - 1);
                double xdis = p2.getX() - p1.getX();
                double ydis = p2.getY() - p1.getY();
                rec.setWidth((int) xdis);
                rec.setHeight((int) ydis);
                repaint();
            } else if (shapeType == 3) { //triangle//
                if (p1.getX() != -1) {
                    p2 = new Point(evt.getX(), evt.getY());
                    Triangle tri = (Triangle) Shapes.get(Shapes.size() - 1);
//                    double xdis= p2.getX()-p1.getX();
//                    double ydis= p2.getY()-p1.getY();
                    //Point a=new Point((int)p2.getX(),(int)p2.getY());
                    Point b = new Point((int) p1.getX(), (int) p2.getY());
                    double xhalf = ((p2.getX() - p1.getX()) / 2) + p1.getX();
                    Point a = new Point((int) xhalf, (int) p1.getY());
                    tri.setSecPnt(p2);
                    tri.setThPnt(b);
                    tri.setStartPoint(a);
                    repaint();

                }

            }

        }else if (CM == currentMode.RESIZNG) {
        
            System.out.println("Resizing");
        
        
        
        }
//        else if (CM == currentMode.SELECTING) {
//            if (currentSelectedCircle != null) {
//                p2 = new Point(evt.getX(), evt.getY());
//                currentSelectedCircle.move(p2.getX() - p1.getX(), p2.getY() - p1.getY());
//                p1 = new Point(evt.getX(), evt.getY());
//                repaint();
//            }
//        } else if (CM == currentMode.RESIZNG) {
//            if (currentSelectedCircle != null) {
//                p2 = new Point(evt.getX(), evt.getY());
//                //  currentSelectedCircle.move(b.getX() - a.getX(), b.getY() - a.getY());
//                currentSelectedCircle.setRadius(currentSelectedCircle.getRadius() + (p2.getX() - p1.getX()) / 2);
//                p1 = new Point(evt.getX(), evt.getY());
//                repaint();
//            }
//        }
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (CM == currentMode.DRAWING) {
            temp = new Point(evt.getX(), evt.getY());
            System.out.println(temp);
            this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            switch (shapeType) {
                case 0: {
                    if (p1.getX() == -1) {
                        p1 = new Point(evt.getX(), evt.getY());
                        Line line = new Line(p1, p1, currentColor, false);
                        Shapes.add(line);
                        repaint();

//                    } else if (p2.getX() == -1) {
//                        p2 = new Point(evt.getX(), evt.getY());
//                        Line line = new Line(p1, p2, currentColor, false);
//                        Shapes.add(line);
//                        repaint();
//                        p1 = new Point(-1, -1);
//                        p2 = new Point(-1, -1);
                    }
                    break;
                }
                case 1: {
                    if (p1.getX() == -1) {
                        p1 = new Point(evt.getX(), evt.getY());
//                    } else if (p2.getX() == -1) {
//                        p2 = new Point(evt.getX(), evt.getY());
//                        int xsq = (int) Math.pow((p1.getX() - p2.getX()), 2);
//                        int ysq = (int) Math.pow((p1.getY() - p2.getY()), 2);
//                        int radius = (int) Math.sqrt(xsq + ysq);
//                        Point pnt = new Point((int) (p1.getX() - radius), (int) (p1.getY() - radius));
//                        
                        Circle circle = new Circle(p1, 0, currentColor, isFilled);
                        Shapes.add(circle);
                        repaint();
                        //p1 = new Point(-1, -1);
                        //p2 = new Point(-1, -1);

                    }
                    break;

                }
                case 2: {
                    if (p1.getX() == -1) {
                        p1 = new Point(evt.getX(), evt.getY());
                        Rectangle rec = new Rectangle(p1, 0, 0, currentColor, isFilled);
                        Shapes.add(rec);
                        repaint();
                    }
//                    else if (p2.getX() == -1) {
//                        p2 = new Point(evt.getX(), evt.getY());
//                        Rectangle rec = null;
//                        if (p1.getX() < p2.getX()) {
//                            if (p1.getY() < p2.getY()) {
//                                //  rec = new Rectangle(p1 ,(int) Math.abs((p1.getX() - p2.getX())),(int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//                                rec = new Rectangle(p1, Math.abs((int) (p1.getX() - p2.getX())), (int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//                            } else {
//                                double blah = p1.getY() - p2.getY();
//                                Point Fst = new Point((int) (p1.getX()), ((int) p1.getY() - (int) Math.abs(blah)));
//                                rec = new Rectangle(Fst, (int) Math.abs((p1.getX() - p2.getX())), (int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//
//                            }
//
//                        } else {
//                            if (p1.getY() < p2.getY()) {
//                                Point Fst = new Point((int) p2.getX(), (int) p2.getY() - (int) Math.abs((p1.getY()) - (p2.getY())));
//                                rec = new Rectangle(Fst, (int) Math.abs(p1.getX() - p2.getX()), (int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//                            } else {
//                                Point Fst = new Point((int) p2.getX(), (int) p1.getY() - (int) Math.abs((p1.getY()) - (p2.getY())));
//                                rec = new Rectangle(Fst, (int) Math.abs((p1.getX() - p2.getX())), (int) Math.abs((p1.getY() - p2.getY())), currentColor, isFilled);
//
//                            }
//                        }
//                        Shapes.add(rec);
//                        repaint();
//                        p1 = new Point(-1, -1);
//                        p2 = new Point(-1, -1);
//
//                    }
                    break;
                }
                case 3: {
                    if (p1.getX() == -1) {
                        p1 = new Point(evt.getX(), evt.getY());
                        Triangle tri = new Triangle(p1, p1, p1, currentColor, isFilled);
                        Shapes.add(tri);
                        repaint();
                    }
//                    } else if (!(p1.getX() == -1) && (p2.getX() == -1)) {
//                        p2 = new Point(evt.getX(), evt.getY());
//                    } else if (!(p1.getX() == -1) && !(p2.getX() == -1) && (p3.getX() == -1)) {
//                        p3 = new Point(evt.getX(), evt.getY());
//                        Triangle t = new Triangle(p1, p2, p3, currentColor, isFilled);
//                        Shapes.add(t);
//                        repaint();
//                        p1 = new Point(-1, -1);
//                        p2 = new Point(-1, -1);
//                        p3 = new Point(-1, -1);
//                    }

                    break;
                }
            }
        } else if (CM == currentMode.SELECTING) {
            System.out.println("awel selecting");
            for (int i = Shapes.size() - 1; i >= 0; i--) {
                if (Shapes.get(i) instanceof Rectangle) {
                    Rectangle r = (Rectangle) Shapes.get(i);
                    Rectangle2D rec = new Rectangle2D.Float((int) r.getStartPoint().getX(), (int) r.getStartPoint().getY(), (int) r.getWidth(), (int) r.getHeight());
                    if (rec.contains(evt.getX(), evt.getY())) {
                        Point c = new Point(evt.getX(), evt.getY());
                        r.setisSelected(true);
                        currentSelectedRectangle = (Rectangle) Shapes.get(i);
                        for (int j = 0; j < Shapes.size() - 1; j++) {
                            if (j != i) {
                                Shapes.get(j).setisSelected(false);
                            }
                        }
                    }

                } else if (Shapes.get(i) instanceof Circle) {
                    System.out.println("awel selecting");
                    Circle c = (Circle) Shapes.get(i);
                    Ellipse2D e = new Ellipse2D.Float((int) c.getStartPoint().getX(), (int) c.getStartPoint().getY(), (int) c.getRadius() * 2, (int) c.getRadius() * 2);
                    if (e.contains(evt.getX(), evt.getY())) {
                        // Point c = new Point(evt.getX(), evt.getY());
                        c.setisSelected(true);
                        currentSelectedCircle = (Circle) Shapes.get(i);
                        for (int j = 0; j < Shapes.size() - 1; j++) {
                            if (j != i) {
                                Shapes.get(j).setisSelected(false);
                            }
                        }
                    }

                } else if (Shapes.get(i) instanceof Triangle) {
                    Triangle t = (Triangle) Shapes.get(i);
                    Polygon tri = new Polygon();
                    tri.addPoint((int) t.getStartPoint().getX(), (int) t.getStartPoint().getY());
                    tri.addPoint((int) t.getSecPnt().getX(), (int) t.getSecPnt().getY());
                    tri.addPoint((int) t.getThPnt().getX(), (int) t.getThPnt().getY());
                    if (tri.contains(evt.getX(), evt.getY())) {
                        t.setisSelected(true);
                        Triangle t2 = (Triangle) Shapes.get(i);
                        currentSelectedTriangle = (Triangle) Shapes.get(i);
                        for (int j = 0; j < Shapes.size() - 1; j++) {
                            if (j != i) {
                                Shapes.get(j).setisSelected(false);
                            }
                        }

                    } else if (Shapes.get(i) instanceof Line) {
                        Line l = (Line) Shapes.get(i);
                        Line2D ln = new Line2D.Float((int) l.getStartPoint().getX(), (int) l.getStartPoint().getY(), (int) l.getEndPoint().getX(), (int) l.getEndPoint().getY());
                        if (ln.contains(evt.getX(), evt.getY())) {
                            l.setisSelected(true);
                            currentSelectedLine = (Line) Shapes.get(i);
                        }
                    }
                }
                repaint();
            }

        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        Point P = new Point(evt.getX(), evt.getY());

    }//GEN-LAST:event_formMouseMoved

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
//p1 = new Point(-1, -1);
//        p2 = new Point(-1, -1);
//        currentSelectedCircle = null;
//        currentSelectedLine = null;
//currentSelectedRectangle = null;
//currentSelectedTriangle = null;
        p1 = new Point(-1, -1);
        p2 = new Point(-1, -1);
        p3 = new Point(-1, -1);

    }//GEN-LAST:event_formMouseReleased

    //private void formMouseClicked(java.awt.event.MouseEvent evt) {                                  
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        for (Shapes s : Shapes) {
            g2d.setColor(s.getShapeColor());
            if (s instanceof Line) {
                Line l = (Line) s;
                g.setColor(s.getShapeColor());
                g.drawLine((int) l.getStartPoint().getX(), (int) l.getStartPoint().getY(), (int) l.getEndPoint().getX(), (int) l.getEndPoint().getY());
            } else if (s instanceof Circle) {
                g.setColor(s.getShapeColor());
                Circle c = (Circle) s;
                if (c.isIsfilled()) {
                    g.fillOval((int) c.getStartPoint().getX(), (int) c.getStartPoint().getY(), c.getRadius() * 2, c.getRadius() * 2);
                } else {
                    g.drawOval((int) c.getStartPoint().getX(), (int) c.getStartPoint().getY(), c.getRadius() * 2, c.getRadius() * 2);
                }
                if (c.isSelected() && CM == currentMode.SELECTING) {
                    int x = (int) c.startPoint.getX();
                    int y = (int) c.startPoint.getY();
                    int w = c.getRadius() * 2;
                    int h = w;
                    {
                        g2d.setColor(Color.black);
                        g2d.fillRect(x - 3, y - 3, 6, 6);

                        g2d.fillRect(x + w / 2 - 3, y - 3, 6, 6);

                        g2d.fillRect(x + w - 3, y - 3, 6, 6);

                        g2d.fillRect(x - 3, y + h / 2 - 3, 6, 6);

                        g2d.fillRect(x + w - 3, y + h / 2 - 3, 6, 6);

                        g2d.fillRect(x - 3, y + h - 3, 6, 6);

                        g2d.fillRect(x + w / 2 - 3, y + h - 3, 6, 6);

                        g2d.fillRect(x + w - 3, y + h - 3, 6, 6);
                    }
                }
            } else if (s instanceof Rectangle) {
                g.setColor(s.getShapeColor());
                Rectangle rec = (Rectangle) s;
                if (rec.isIsfilled()) {
                    g.fillRect((int) rec.getStartPoint().getX(), (int) rec.getStartPoint().getY(), rec.getWidth(), rec.getHeight());
                } else {
                    g.drawRect((int) rec.getStartPoint().getX(), (int) rec.getStartPoint().getY(), rec.getWidth(), rec.getHeight());
                }
                if (rec.isSelected) {
                    int x = (int) rec.startPoint.getX();
                    int y = (int) rec.startPoint.getY();
                    int w = rec.getWidth();
                    int h = rec.getHeight();

                    {
                        g2d.setColor(Color.BLACK);
                        g2d.fillRect(x - 3, y - 3, 6, 6);
                        g2d.fillRect(x + w, y - 3, 6, 6);
                        g2d.fillRect(x - 3, y + h, 6, 6);
                        g2d.fillRect(x + w, y + h, 6, 6);

                    }
                    System.out.println("tany select");
                }

            } else if (s instanceof Triangle) {
                g.setColor(s.getShapeColor());
                Triangle t = (Triangle) s;

                Polygon p = new Polygon();
                p.addPoint((int) t.getStartPoint().getX(), (int) t.getStartPoint().getY());
                p.addPoint((int) t.getSecPnt().getX(), (int) t.getSecPnt().getY());
                p.addPoint((int) t.getThPnt().getX(), (int) t.getThPnt().getY());

                if (t.isIsfilled()) {
                    g.fillPolygon(p);
                } else {
                    g.drawPolygon(p);
                }
               if (t.isSelected) {
                    int x1 = (int) t.startPoint.getX();
                    int y1 = (int) t.startPoint.getY();
                    int x2 = (int) t.getSecPnt().getX();
                    int y2 = (int) t.getSecPnt().getY();
                    int x3 = (int) t.getThPnt().getX();
                    int y3 = (int) t.getThPnt().getY();

                    {
                        g2d.setColor(Color.BLACK);
                        g2d.fillRect(x1 - 3, y1, 6, 6);
                        g2d.fillRect(x2 - 3, y2, 6, 6);
                        g2d.fillRect(x3 - 3, y3, 6, 6);

                    }

                } 

            }

        }
    }
   
    
public void save(){String temp;

    for (int i =0;i<Shapes.size();i++){
        temp="";
   Shapes xShape=Shapes.get(i);
   String xFilled=String.valueOf(xShape.isfilled);
   String xColor;
   try{
    xColor=String.valueOf(Integer.toHexString(xShape.getShapeColor().getRGB()));
        System.out.println(xColor);}
      catch(NullPointerException name){
      xColor=String.valueOf(Integer.toHexString(Color.BLACK.getRGB()));
      }
        System.out.println(xColor);
   
     
        if (Shapes.get(i) instanceof Circle){
            Circle c = (Circle) Shapes.get(i);
            temp=temp+tags(Shapes.get(i).getStartPoint().getX()+"","StartingPointX");
    temp=temp+tags(Shapes.get(i).getStartPoint().getY()+"","StartingPointY");
    temp=temp+tags(xFilled,"isFilled");
     temp=temp+tags(xColor,"Color");
    
  temp=temp+tags(""+c.getRadius(),"Radius");
  
    towrite=towrite+tags(temp,"Circle");
        }
        else if(Shapes.get(i) instanceof Rectangle){
            Rectangle r =(Rectangle) xShape;
         temp=temp+tags(Shapes.get(i).getStartPoint().getX()+"","StartingPointX");
    temp=temp+tags(Shapes.get(i).getStartPoint().getY()+"","StartingPointY");
    temp=temp+tags(xFilled,"isFilled");
     temp=temp+tags(xColor,"Color");
     temp=temp+tags(r.getHeight()+"","Height");
      temp=temp+tags(r.getWidth()+"","Width");
     
     
    towrite=towrite+tags(temp,"Rectangle");
    
        }
         else if(Shapes.get(i) instanceof Line){
             Line l = (Line)xShape;
            temp=temp+tags(Shapes.get(i).getStartPoint().getX()+"","StartingPointX");
    temp=temp+tags(Shapes.get(i).getStartPoint().getY()+"","StartingPointY");
    temp=temp+tags(xFilled,"isFilled");
     temp=temp+tags(xColor,"Color");
     temp=temp+tags(l.getEndPoint().getX()+"","endX");
     temp=temp+tags(l.getEndPoint().getY()+"","endY");
     
    towrite=towrite+tags(temp,"Line"); }
         else if(Shapes.get(i) instanceof Triangle){
             Triangle t = (Triangle)xShape;
         temp=temp+tags(Shapes.get(i).getStartPoint().getX()+"","StartingPointX");
    temp=temp+tags(Shapes.get(i).getStartPoint().getY()+"","StartingPointY");
   temp=temp+tags(xFilled,"isFilled");
     temp=temp+tags(xColor,"Color");
     temp=temp+tags(""+t.getSecPnt().getX(),"ndPointX");
     temp=temp+tags(""+t.getSecPnt().getY(),"ndPointY");
     temp=temp+tags(""+t.getThPnt().getX(),"rdPointX");
     temp=temp+tags(""+t.getThPnt().getY(),"rdPointY");
     
     
    towrite=towrite+tags(temp,"Triangle");}
        
        
    }
   towrite= tags(towrite,"Shapes");
    
    System.out.println(towrite+"hello");
}




 public String tags(String text,String tag){
    if (text == null){text="";}
       return "<"+tag+">\r\n"+text+"\r\n</"+tag+">\n"; 
           }


public void load(String s1){

    try {

	File fXmlFile = new File(s1);
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);
			
	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
			
	NodeList CircleList = doc.getElementsByTagName("Circle");
       NodeList TriangleList = doc.getElementsByTagName("Triangle");
       NodeList LineList = doc.getElementsByTagName("Line");
       NodeList RectList = doc.getElementsByTagName("Rectangle");
	System.out.println("----------------------------");

	for (int temp = 0; temp < CircleList.getLength(); temp++) {

		Node nNode = CircleList.item(temp);
				
		System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;
                        
			//System.out.println("rad : " + eElement.getAttribute("Radius"));
                         String r1=eElement.getElementsByTagName("Radius").item(0).getTextContent();
                      System.out.println(r1.substring(0, r1.length()-1)+"Radiusssssssssssssssssss");
                      String r2 = (r1.substring(0, r1.length()-1));
                      System.out.println(r2);
                      int Radius=Integer.parseInt(r2.substring(1));
                      //System.out.println("rad : " + eElement.getElementsByTagName("Radius").item(0).getTextContent());
                        System.out.println(r1+" rrrrrrrrrrrrr");
//int Radius = Integer.parseInt(eElement.getElementsByTagName("Radius").item(0).getTextContent());
//System.out.println(eElement.getElementsByTagName("StartingPointX")+"");
                //    p1 = new Point(Integer.parseInt(""+eElement.getElementsByTagName("StartingPointX").item(0).getTextContent()),Integer.parseInt(""+eElement.getElementsByTagName("StartingPointY").item(0).getTextContent()));
			String xval=eElement.getElementsByTagName("StartingPointX").item(0).getTextContent();
                        String yval=eElement.getElementsByTagName("StartingPointY").item(0).getTextContent();
                       
                        float fx =Float.parseFloat(xval+"");
                        float fy = Float.parseFloat(yval+"");
                        Point sp=new Point((int)fx, (int)fy);
                        System.out.println(sp);
                        System.out.println(xval+"."+yval);
                        //Point px = new Point( Integer.parseInt(xval+""), Integer.parseInt(yval+""));
                        
                        System.out.println("x : " + xval);
			//System.out.println("y : " + eElement.getElementsByTagName("StartingPointY").item(0).getTextContent());
			System.out.println("filled : " + eElement.getElementsByTagName("isFilled").item(0).getTextContent());
			  boolean filled = Boolean.parseBoolean(eElement.getElementsByTagName("isFilled").item(0).getTextContent().substring(1,5));
                      
                        System.out.println("color : " + eElement.getElementsByTagName("Color").item(0).getTextContent());
                        String clr1 =eElement.getElementsByTagName("Color").item(0).getTextContent().substring(1,7);
                        System.out.println(clr1+"#ff801A");
                        clr1="#"+clr1;
                       // Color clr=Color.decode(clr1.substring(0,7).toUpperCase());
                       String Test = "#ff801A";
                      
                       Color clr=Color.decode(clr1);
                        
//System.out.println("Salary : " + eElement.getElementsByTagName("Color").item(0).getTextContent());
                       System.out.println(clr.getRGB()+"******!!!!!!!!");
                       Circle c1 = new Circle (sp,Radius,clr,filled);
                       Shapes.add(c1);
             repaint();
		}
	}
        for (int temp = 0; temp < LineList.getLength(); temp++) {

		Node nNode = LineList.item(temp);
				
		System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			//System.out.println("Staff : " + eElement.getAttribute("Radius"));
                        String xval=eElement.getElementsByTagName("StartingPointX").item(0).getTextContent();
                        String yval=eElement.getElementsByTagName("StartingPointY").item(0).getTextContent();
                       
                        float fx =Float.parseFloat(xval+"");
                        float fy = Float.parseFloat(yval+"");
                        Point sp=new Point((int)fx, (int)fy);
                        System.out.println(sp);
                        System.out.println(xval+"."+yval);
			System.out.println("x : " + eElement.getElementsByTagName("StartingPointX").item(0).getTextContent());
			System.out.println("t : " + eElement.getElementsByTagName("StartingPointY").item(0).getTextContent());
			String Endx=eElement.getElementsByTagName("endX").item(0).getTextContent();
                        String Endy=eElement.getElementsByTagName("endY").item(0).getTextContent();
                        float fendx=Float.parseFloat(Endx+"");
                        float fendy=Float.parseFloat(Endy+"");
                        Point ep=new Point((int)fendx,(int)fendy);
                        String clr1 =eElement.getElementsByTagName("Color").item(0).getTextContent().substring(1,7);
                        System.out.println(clr1+"#ff801A");
                        clr1="#"+clr1;
                       // Color clr=Color.decode(clr1.substring(0,7).toUpperCase());
                       String Test = "#ff801A";
                      
                       Color clr=Color.decode(clr1);
                       Line ln = new Line(sp,ep,clr,false);
                       Shapes.add(ln);
                       repaint();
                        //System.out.println("Nick Name : " + eElement.getElementsByTagName("isFilled").item(0).getTextContent());
			//System.out.println("Salary : " + eElement.getElementsByTagName("Color").item(0).getTextContent());
                        //System.out.println("Salary : " + eElement.getElementsByTagName("Color").item(0).getTextContent());

		}
	}
        for (int temp = 0; temp < RectList.getLength(); temp++) {

		Node nNode = RectList.item(temp);
				
		System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			//System.out.println("Staff : " + eElement.getAttribute("Width"));
                        String xval=eElement.getElementsByTagName("StartingPointX").item(0).getTextContent();
                        String yval=eElement.getElementsByTagName("StartingPointY").item(0).getTextContent();
                       
                        float fx =Float.parseFloat(xval+"");
                        float fy = Float.parseFloat(yval+"");
                        Point sp=new Point((int)fx, (int)fy);
			System.out.println("First Name : " + eElement.getElementsByTagName("Width").item(0).getTextContent());
			System.out.println("Last Name : " + eElement.getElementsByTagName("Height").item(0).getTextContent());
			String w =eElement.getElementsByTagName("Width").item(0).getTextContent().trim();
                        String h =eElement.getElementsByTagName("Height").item(0).getTextContent().trim();
                        int wid = Integer.parseInt(w);
                        int ht = Integer.parseInt(h);
                        boolean filled = Boolean.parseBoolean(eElement.getElementsByTagName("isFilled").item(0).getTextContent().substring(1,5));
                      //System.out.println("."+Boolean.parseBoolean(eElement.getElementsByTagName("isFilled").item(0).getTextContent().substring(1,5)));
                        String clr1 =eElement.getElementsByTagName("Color").item(0).getTextContent().substring(1,7);
                        System.out.println(clr1+"#ff801A");
                        clr1="#"+clr1;
                       // Color clr=Color.decode(clr1.substring(0,7).toUpperCase());
                       String Test = "#ff801A";
                      
                       Color clr=Color.decode(clr1);
                       
                        Rectangle r = new Rectangle (sp,wid,ht,clr,filled);
                        Shapes.add(r);
                        repaint();
                        //System.out.println("Salary : " + eElement.getElementsByTagName("Color").item(0).getTextContent());

		}
	}
        for (int temp = 0; temp < TriangleList.getLength(); temp++) {

		Node nNode = TriangleList.item(temp);
				
		System.out.println("\nCurrent Element :" + nNode.getNodeName());
				
		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;
 String xval=eElement.getElementsByTagName("StartingPointX").item(0).getTextContent();
                        String yval=eElement.getElementsByTagName("StartingPointY").item(0).getTextContent();
                       
                        float fx =Float.parseFloat(xval+"");
                        float fy = Float.parseFloat(yval+"");
                        Point sp=new Point((int)fx, (int)fy);
			
                        String xndval=eElement.getElementsByTagName("ndPointX").item(0).getTextContent();
                        String yndval=eElement.getElementsByTagName("ndPointY").item(0).getTextContent();
                       
                        float fndx =Float.parseFloat(xndval+"");
                        float fndy = Float.parseFloat(yndval+"");
                        Point ndp=new Point((int)fndx, (int)fndy);
                        
                        String xrdval=eElement.getElementsByTagName("rdPointX").item(0).getTextContent();
                        String yrdval=eElement.getElementsByTagName("rdPointY").item(0).getTextContent();
                       
                        float frdx =Float.parseFloat(xrdval+"");
                        float frdy = Float.parseFloat(yrdval+"");
                        Point rdp=new Point((int)frdx, (int)frdy);
                        
                        System.out.println("Staff : " + eElement.getAttribute("Radius"));
                          boolean filled = Boolean.parseBoolean(eElement.getElementsByTagName("isFilled").item(0).getTextContent().substring(1,5));
                     
			System.out.println("ndx : " + eElement.getElementsByTagName("ndPointX").item(0).getTextContent());
			System.out.println("ndy : " + eElement.getElementsByTagName("ndPointY").item(0).getTextContent());
			System.out.println("rdx : " + eElement.getElementsByTagName("rdPointX").item(0).getTextContent());
			System.out.println("rdy : " + eElement.getElementsByTagName("rdPointY").item(0).getTextContent());
                        //System.out.println("Salary : " + eElement.getElementsByTagName("Color").item(0).getTextContent());
String clr1 =eElement.getElementsByTagName("Color").item(0).getTextContent().substring(1,7);
                        System.out.println(clr1+"#ff801A");
                        clr1="#"+clr1;
                       // Color clr=Color.decode(clr1.substring(0,7).toUpperCase());
                       String Test = "#ff801A";
                      
                       Color clr=Color.decode(clr1);
                       Triangle t = new Triangle(sp,ndp,rdp,clr,filled);
                       Shapes.add(t);
                       repaint();
                       
                       
		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
  }




}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

